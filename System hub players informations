if not game:IsLoaded() then
    game:IsLoaded():Wait()
end
 
local speaker = game.Players.LocalPlayer 
local plr = game.Players.LocalPlayer
local playerlp = plr
local Characterlp = plr.Character
local Area = game:GetService("Workspace")
local players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local coregui = game:GetService("CoreGui")
local Mouse = plr:GetMouse()
local MyView = Area.CurrentCamera
local MyTeamColor = plr.TeamColor
local HoldingM2 = false
local Active = false
local Lock = false
local Epitaph = .187 ---Note: The Bigger The Number, The More Prediction.
local HeadOffset = Vector3.new(0, .1, 0)
Players = game:GetService("Players")
IYMouse = Players.LocalPlayer:GetMouse()
UserInputService = game:GetService("UserInputService")
autoclicking = false
local WalkTo = false
local Guarding = false
local Flinging = false
local Platformstand = false
local viewing = nil
local Control = false
local Lagging = false
local AutoObby = false
local invisRunning = false
local IsInvis = false
local IsRunning = true
local invisFix
local invisDied
local InvisibleCharacter
local CF
local Clip = true
local Regulars = false
local vnoclipParts = {}
local FlingTBL = {}
local frozenParts = {}
local vfreeze = {}
local RestoreCFling = {}
local shownParts = {}
local showninParts = {}
local showninvParts = {}
local shownvisParts = {}
local vstrongParts = {}
local vweakParts = {}
local highlights = {}
local workspace = game.Workspace
local Noclipping = nil
local viewDied
local viewChanged
local triggermd
local triggermp
local cancelAutoClick
local highlight
local highlight2
local closesttouch = nil
local closestclick = nil
local closestprox = nil
local closestseat = nil
local lockcursorman
local unlockcursorman
local fakekicktbl
CFloop = nil
CFspeed = 50
simRadius = false
FLYING = false
QEfly = true
NOWW = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed
NOWJ = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").JumpPower
NOWG = game.Workspace.Gravity
NOWH = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").HipHeight
iyflyspeed = 1
PlayerVolumeBELIKE = UserSettings():GetService("UserGameSettings").MasterVolume
PlayerGraphicsBELIKE = settings().Rendering.QualityLevel
vehicleflyspeed = 1
local HumanModCons = {}
local flyjump
local simRadLoop
local stareLoop
local currentToolSize = ""
local currentGripPos = ""
local invisRunning = false
local noSit
local nositDied
local proxDied = nil
local clickDied = nil
local selclick = nil
local seltouch = nil
local selprox = nil
local selseat = nil
local selinvisp = nil
local selcanc = nil
local YesRefresh = false
local sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop
local setsimulation = setsimulationradius or set_simulation_radius

function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end
 
function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end
 
function SimRad()
   if sethidden then		
		simRadLoop = game:GetService('RunService').Stepped:Connect(function()
			if setsimulation then
				setsimulation(1e308, 1/0)
			else	
				sethidden(plr,"MaximumSimulationRadius",1/0)
				sethidden(plr,"SimulationRadius", 1e308)
			end
		end)
		simRadius = true
	end
end
 
function toClipboard(String)
	local clipBoard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
	if clipBoard then
		clipBoard(String)
	end
end
 
local function CursorLock()
	UIS.MouseBehavior = Enum.MouseBehavior.LockCenter
end
local function UnLockCursor()
	HoldingM2 = false Active = false Lock = false 
	UIS.MouseBehavior = Enum.MouseBehavior.Default
end

function FindNearestPlayer()
	local dist = math.huge
	local Target = nil
	for _, v in pairs(game.Players:GetPlayers()) do
		if v ~= plr and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 and getRoot(v.Character) and v then
			local TheirCharacter = v.Character
			local CharacterRoot, Visible = MyView:WorldToViewportPoint(getRoot(TheirCharacter).Position)
			if Visible then
				local RealMag = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(CharacterRoot.X, CharacterRoot.Y)).Magnitude
				if RealMag < dist and RealMag < FOVCircle.Radius then
					dist = RealMag
					Target = TheirCharacter
				end
			end
		end
	end
	return Target
end
 
function Noclip()
   Clip = false
	function NoclipLoop()
		if Clip == false and plr.Character ~= nil then
			for _, child in pairs(plr.Character:GetDescendants()) do
				if child:IsA("BasePart") and child.CanCollide == true then
					child.CanCollide = false
				end
			end
		end
	end
	Noclipping = game:GetService('RunService').Stepped:connect(NoclipLoop)
end
 
function TurnsVisible()
		if IsInvis == false then return end
		invisFix:Disconnect()
		invisDied:Disconnect()
		CF = game.Workspace.CurrentCamera.CFrame
		Characterlp = Characterlp
		local CF_1 = playerlp.Character.HumanoidRootPart.CFrame
		Characterlp.HumanoidRootPart.CFrame = CF_1
		InvisibleCharacter:Destroy()
		playerlp.Character = Characterlp
		Characterlp.Parent = workspace
		IsInvis = false
		playerlp.Character.Animate.Disabled = true
		playerlp.Character.Animate.Disabled = false
		invisDied = Characterlp:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
			invisRespawn()
			invisDied:Disconnect()
		end)
		invisRunning = false
	end

function invisRespawn()
		IsRunning = false
		if IsInvis == true then
			pcall(function()
				playerlp.Character = Characterlp
				wait()
				Characterlp.Parent = game.Workspace
				Characterlp:FindFirstChildWhichIsA'Humanoid':Destroy()
				IsInvis = false
				InvisibleCharacter.Parent = nil
				invisRunning = false
			end)
		elseif IsInvis == false then
			pcall(function()
				playerlp.Character = Characterlp
				wait()
				Characterlp.Parent = game.Workspace
				Characterlp:FindFirstChildWhichIsA'Humanoid':Destroy()
				TurnsVisible()
			end)
		end
	end
 
function TurnVisible()
		if IsInvis == false then return end
		invisFix:Disconnect()
		invisDied:Disconnect()
		CF = game.Workspace.CurrentCamera.CFrame
		Characterlp = Characterlp
		local CF_1 = playerlp.Character.HumanoidRootPart.CFrame
		Characterlp.HumanoidRootPart.CFrame = CF_1
		InvisibleCharacter:Destroy()
		playerlp.Character = Characterlp
		Characterlp.Parent = workspace
		IsInvis = false
		playerlp.Character.Animate.Disabled = true
		playerlp.Character.Animate.Disabled = false
		invisDied = Characterlp:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
			invisRespawn()
			invisDied:Disconnect()
		end)
		invisRunning = false
	end
 
function fixcam()
   game.Workspace.CurrentCamera:Remove()
	wait(.1)
	repeat wait() until plr.Character ~= nil
	game.Workspace.CurrentCamera.CameraSubject = plr.Character:FindFirstChildWhichIsA('Humanoid')
	game.Workspace.CurrentCamera.CameraType = "Custom"
	plr.CameraMinZoomDistance = 0.5
	plr.CameraMaxZoomDistance = 400
	plr.CameraMode = "Classic"
	plr.Character.Head.Anchored = false
end
 
function respawn(plr)
	if invisRunning then TurnVisible() end
	local char = plr.Character
	if char:FindFirstChildOfClass("Humanoid") then char:FindFirstChildOfClass("Humanoid"):ChangeState(15) end
	char:ClearAllChildren()
	local newChar = Instance.new("Model")
	newChar.Parent = workspace
	plr.Character = newChar
	wait()
	plr.Character = char
	newChar:Destroy()
end
 
function refresh(plr)
	local Human = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid", true)
	local pos = Human and Human.RootPart and Human.RootPart.CFrame
	local pos1 = game.Workspace.CurrentCamera.CFrame
	respawn(plr)
	task.spawn(function()
		speaker.CharacterAdded:Wait():WaitForChild("Humanoid").RootPart.CFrame, workspace.CurrentCamera.CFrame = pos, wait() and pos1
	end)
end
 
function tools(plr)
	if plr:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
		return true
	end
end
 
function attach(speaker,target)
	if tools(speaker) then
		local char = speaker.Character
		local tchar = target.Character
		local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
		local hrp = getRoot(speaker.Character)
		local hrp2 = getRoot(target.Character)
		hum.Name = "1"
		local newHum = hum:Clone()
		newHum.Parent = char
		newHum.Name = "Humanoid"
		wait()
		hum:Destroy()
		game.Workspace.CurrentCamera.CameraSubject = char
		newHum.DisplayDistanceType = "None"
		local tool = speaker:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass("Tool") or speaker.Character:FindFirstChildOfClass("Tool")
		tool.Parent = char
		hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200)
		local n = 0
		repeat
			wait(.1)
			n = n + 1
			hrp.CFrame = hrp2.CFrame
		until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
	else
		game.StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You need to have an item in backpack to execute this script.", Duration = 4,})
	end
end
 
function bring(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = NormPos
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			wait(1)
			plr.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		game.StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You need to have an item in backpack to execute this script.", Duration = 4,})
	end
end
 
function kill(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5,999999)
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			wait(1)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		game.StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You need to have an item in backpack to execute this script.", Duration = 4,})
	end
end
 
function teleport(speaker,target,target2,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			local hrp2 = getRoot(target2.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = hrp2.CFrame
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			wait(1)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		game.StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You need to have an item in backpack to execute this script.", Duration = 4,})
	end
end
 
function GetPlayer(String)
	local Foundplr = {}
	local strl = String:lower()
	if strl == "all" then
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			table.insert(Foundplr,v)
		end
	elseif strl == "random" then
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.Name ~= plr.Name then
				table.insert(Foundplr,v)
			end
		end
	elseif strl == "me" then
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.Name == plr.Name then
				table.insert(Foundplr,v)
			end
		end
	else
		for i,v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.DisplayName:lower():sub(1, #String) == String:lower() or v.Name:lower():sub(1, #String) == String:lower() then
				table.insert(Foundplr,v)
			end
		end
	end
	return Foundplr
end
 
function GetNPC(String)
      local FoundNPC = {}
	  local strl = String:lower()
             for i,v in pairs(game.Workspace:GetDescendants()) do do
			 if v:IsA("Model") and v.Name:lower():sub(1, #String) == String:lower() then
				table.insert(FoundNPC,v)
			end
		end
	end
	return FoundNPC
end
 
local function align(part0,part1)
	local attachment0 = Instance.new("Attachment",part1)
	local attachment1 = Instance.new("Attachment",part0)
 
	local alignpos = Instance.new("AlignPosition",part0)
	alignpos.MaxForce = math.huge
	alignpos.Responsiveness = 200
	alignpos.Attachment0 = attachment0
	alignpos.Attachment1 = attachment1
end
 
local function fling(part0)
	local vel = Instance.new("BodyAngularVelocity",part0)
	vel.AngularVelocity = Vector3.new(1,1,1)*999
	vel.MaxTorque = Vector3.new(1,1,1)*9999
end
 
local function loadcharacter(character)
	local scf = character.HumanoidRootPart.CFrame
	character.HumanoidRootPart.CFrame = scf*CFrame.new(0,100,0)
	character.HumanoidRootPart.Anchored = true
 
	wait(1)
 
	local fakec = Instance.new("Model",workspace)
 
	local froot = Instance.new("Part",fakec)
	froot.Name = "HumanoidRootPart"
	froot.Size = Vector3.new(1,5,1)
	froot.CFrame = scf
	froot.Transparency = 0.5
 
	Instance.new("Humanoid",fakec)
 
	plr.Character = fakec
	workspace.CurrentCamera.CameraSubject = fakec.Humanoid
 
	align(froot,character.HumanoidRootPart)
 
	character.Humanoid:Destroy()
 
	for _,p in pairs(character:GetDescendants()) do
		if p:IsA("BasePart") then
			p.CanCollide = false
			p.Massless = true
		elseif p:IsA("BodyGyro") or p:IsA("BodyAngularVelocity") or p:IsA("BodyVelocity") then
			p:Destroy()
		end
	end
 
	game.RunService.Heartbeat:Connect(function()
		for _,p in pairs(character:GetDescendants()) do
		if p:IsA("BasePart") then
			p.CanCollide = false
			p.Massless = true
			p.Anchored = false
		elseif p:IsA("Weld")then
			p.Enabled = false
		end
	end
	end)
 
 
	wait()
 
	wait(1)
	fling(character.HumanoidRootPart)
end
 
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/ionlyusegithubformcmods/1-Line-Scripts/main/Mobile%20Friendly%20Orion')))()
local Window = OrionLib:MakeWindow({
		Name = "System hub Troll",
		HidePremium = false,
		SaveConfig = true,
		ConfigFolder = "OrionTest",
        IntroText = "Loading Script..."       
})

local LP = Window:MakeTab({
	Name = "LocalPlayer",
	Icon = "rbxassetid://6023426915",
	PremiumOnly = false --- Set true, if you want to this tab was only for premium people, or false to all could use this.
})

function refresh()
	local oldpos = plr.Character.HumanoidRootPart.CFrame
	plr.Character.Humanoid.Health = 0
	if plr.Character:FindFirstChild("Head") then plr.Character.Head:Destroy() end
	plr.CharacterAdded:Wait()
	plr.Character:WaitForChild("HumanoidRootPart")
	plr.Character.HumanoidRootPart.CFrame = oldpos
end

LP:AddButton({
	Name = "Refresh",
	Callback = function()
      	if Noclipping then
		   Noclipping:Disconnect()
		   YesRefresh = true  
		end
		refresh()
		if YesRefresh == true then
        Clip = false
	wait(0.1)
	Noclip()
	YesRefresh = false
	wait(0.1)
	if Noclipping then
	   Noclipping:Disconnect()	
	end	
	end
  	end    
})

LP:AddButton({
	Name = "Refresh Model",
	Callback = function()
      	plr.Character:ClearAllChildren()
    local char = Instance.new("Model", workspace)
    Instance.new("Humanoid", char)
    plr.Character = char
  	end    
})

LP:AddButton({
	Name = "Respawn",
	Callback = function()
      	game.Players.LocalPlayer.Character:Destroy()
    game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):Destroy()
    game.Players.LocalPlayer.Character.Head:Destroy()
	getRoot(plr.Character):Destroy()
  	end    
})

function sFLY(vfly)
	repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and Players.LocalPlayer.Character.HumanoidRootPart and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	repeat wait() until IYMouse
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

	local T = Players.LocalPlayer.Character.HumanoidRootPart
	local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local SPEED = 0

	local function FLY()
		FLYING = true
		local BG = Instance.new('BodyGyro')
		local BV = Instance.new('BodyVelocity')
		BG.P = 9e4
		BG.Parent = T
		BV.Parent = T
		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		BG.cframe = T.CFrame
		BV.velocity = Vector3.new(0, 0, 0)
		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
		task.spawn(function()
			repeat wait()
				if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
					Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
				end
				if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
					SPEED = 50
				elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
					SPEED = 0
				end
				if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
					lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
				elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
				else
					BV.velocity = Vector3.new(0, 0, 0)
				end
				BG.cframe = workspace.CurrentCamera.CoordinateFrame
			until not FLYING
			CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			SPEED = 0
			BG:Destroy()
			BV:Destroy()
			if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
				Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
			end
		end)
	end
	flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 's' then
			CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'a' then
			CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'd' then 
			CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
		elseif QEfly and KEY:lower() == 'e' then
			CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
		elseif QEfly and KEY:lower() == 'q' then
			CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
		end
		pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
	end)
	flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 0
		elseif KEY:lower() == 's' then
			CONTROL.B = 0
		elseif KEY:lower() == 'a' then
			CONTROL.L = 0
		elseif KEY:lower() == 'd' then
			CONTROL.R = 0
		elseif KEY:lower() == 'e' then
			CONTROL.Q = 0
		elseif KEY:lower() == 'q' then
			CONTROL.E = 0
		end
	end)
	FLY()
end

function NOFLY()
	FLYING = false
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
	if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
		Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
	end
	pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

LP:AddToggle({
	Name = "Fly",
	Default = false,
	Callback = function(Fly)
		if Fly == true then
               NOFLY()
	wait()
	sFLY()
          else
               Fly = false
               NOFLY()
	end
  end    
})

LP:AddTextbox({
	Name = "Fly Speed",
	Default = "",
	TextDisappear = true,
	Callback = function(Flyspeed)
		iyflyspeed = Flyspeed  
		end	
})

LP:AddToggle({
	Name = "mobile Fly",
	Default = false,
	Callback = function(cFly)
		if cFly == true then
               plr.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
	local Head = plr.Character:WaitForChild("Head")
	Head.Anchored = true
	CFloop = game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
		local moveDirection = plr.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (CFspeed * deltaTime)
		local headCFrame = Head.CFrame
		local cameraCFrame = game.Workspace.CurrentCamera.CFrame
		local cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
		cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
		local cameraPosition = cameraCFrame.Position
		local headPosition = headCFrame.Position

		local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
		Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
	end)
          else
               cFly = false
               if CFloop then
		CFloop:Disconnect()
		plr.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
		local Head = plr.Character:WaitForChild("Head")
		Head.Anchored = false
	end
	end
  end    
})

LP:AddTextbox({
	Name = "mibile Fly Speed",
	Default = "",
	TextDisappear = true,
	Callback = function(cFlyspeed)
		CFspeed = cFlyspeed
	end	
})

LP:AddToggle({
	Name = "Fly Fling",
	Default = false,
	Callback = function(Fly)
		if Fly == true then
               NOFLY()
	wait()
    for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
    if v:IsA("Part") then

v.CustomPhysicalProperties = PhysicalProperties.new(9e99, 9e99, 9e99, 9e99, 9e99)
end
end
    Noclip()
	sFLY(true)
    local BodyAV = Instance.new("BodyAngularVelocity", game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart"))
BodyAV.AngularVelocity = Vector3.new(0, 2000, 0)
BodyAV.MaxTorque = Vector3.new(0, math.huge, 0)
BodyAV.Name = "FlyFling"
BodyAV.P = 1250
          else
               Fly = false
               NOFLY()
               for _, child in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
		if child.ClassName == "Part" then
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5, 0, 0)
		end
	end
               for i,v in pairs(plr.Character:GetDescendants()) do
                   if v:IsA("BodyAngularVelocity") and v.Name == "FlyFling" then
                      v:Destroy()
                   end
               end
               vNoclip = false
			if Noclipping then
		Noclipping:Disconnect()
	end
	Clip = true
	end
  end    
})

LP:AddTextbox({
	Name = "Fly Fling Speed",
	Default = "",
	TextDisappear = true,
	Callback = function(vFlyspeedsz)
		vehicleflyspeed = vFlyspeedsz
		end	
})


LP:AddToggle({
	Name = "Invisible",
	Default = false,
	Callback = function(invisibleofc)
		if invisibleofc == true then
              if invisRunning then return end
	invisRunning = true
	-- Full credit to AmokahFox @V3rmillion
	local Player = plr
	repeat wait(.1) until Player.Character
	local Character = Player.Character
	Character.Archivable = true
	InvisibleCharacter = Character:Clone()
	InvisibleCharacter.Parent = game:GetService'Lighting'
	local Void = game.Workspace.FallenPartsDestroyHeight
	InvisibleCharacter.Name = ""
	     invisFix = game:GetService("RunService").Stepped:Connect(function()
		pcall(function()
			local IsInteger
			if tostring(Void):find'-' then
				IsInteger = true
			else
				IsInteger = false
			end
			local Pos = Player.Character.HumanoidRootPart.Position
			local Pos_String = tostring(Pos)
			local Pos_Seperate = Pos_String:split(', ')
			local X = tonumber(Pos_Seperate[1])
			local Y = tonumber(Pos_Seperate[2])
			local Z = tonumber(Pos_Seperate[3])
			if IsInteger == true then
				if Y <= Void then
					invisRespawn()
				end
			elseif IsInteger == false then
				if Y >= Void then
					invisRespawn()
				end
			end
		end)
	end)
	      for i,v in pairs(InvisibleCharacter:GetDescendants())do
		if v:IsA("BasePart") then
			if v.Name == "HumanoidRootPart" then
				v.Transparency = 1
			else
				v.Transparency = .5
			end
		end
	end
	invisDied = InvisibleCharacter:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
		invisRespawn()
		invisDied:Disconnect()
	end)
	if IsInvis == true then return end
	IsInvis = true
	CF = game.Workspace.CurrentCamera.CFrame
	local CF_1 = Player.Character.HumanoidRootPart.CFrame
	Character:MoveTo(Vector3.new(0,math.pi*1000000,0))
	game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
	wait(.2)
	game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
	InvisibleCharacter = InvisibleCharacter
	Character.Parent = game:GetService'Lighting'
	InvisibleCharacter.Parent = game.Workspace
	InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
	Player.Character = InvisibleCharacter
	fixcam()
	Player.Character.Animate.Disabled = true
	Player.Character.Animate.Disabled = false
          else
               invisibleofc = false
			   TurnVisible()
	end
  end    
})

LP:AddButton({
	Name = "God Mode",
	Callback = function()
      	local Cam = workspace.CurrentCamera
	local Pos, Char = Cam.CFrame, game.Players.LocalPlayer.Character
	local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
	local nHuman = Human:Clone(Human)
	nHuman.Parent, game.Players.LocalPlayer.Character = Char, nil
	nHuman.SetStateEnabled(nHuman, 15, false)
	nHuman.SetStateEnabled(nHuman, 1, false)
	nHuman.SetStateEnabled(nHuman, 0, false)
	nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
	game.Players.LocalPlayer.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
	nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
	local Script = Char.FindFirstChild(Char, "Animate")
	if Script then
		Script.Disabled = true
		wait()
		Script.Disabled = false
	end
	nHuman.Health = nHuman.MaxHealth
  	end    
})

LP:AddButton({
	Name = "God Mode [Humanoid Replacer]",
	Callback = function()
      	game.Players.LocalPlayer.Character.Humanoid.Name = 1
local l = game.Players.LocalPlayer.Character["1"]:Clone()
l.Parent = game.Players.LocalPlayer.Character
l.Name = "Humanoid"
wait(0.1)
game.Players.LocalPlayer.Character["1"]:Destroy()
game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character.Animate.Disabled = true
wait(0.1)
game.Players.LocalPlayer.Character.Animate.Disabled = false
game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"
  	end    
})

LP:AddButton({
	Name = "unAnchored Parts to You",
	Callback = function()
      	if sethidden then
			local Forces = {}
			for _,part in pairs(game.Workspace:GetDescendants()) do
				if game.Players.LocalPlayer.Character:FindFirstChild("Head") and part:IsA("BasePart" or "UnionOperation" or "Model") and part.Anchored == false and not part:IsDescendantOf(plr.Character) and part.Name == "Torso" == false and part.Name == "Head" == false and part.Name == "Right Arm" == false and part.Name == "Left Arm" == false and part.Name == "Right Leg" == false and part.Name == "Left Leg" == false and part.Name == "HumanoidRootPart" == false then
					for i,c in pairs(part:GetChildren()) do
						if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
							c:Destroy()
						end
					end
					local ForceInstance = Instance.new("BodyPosition")
					ForceInstance.Parent = part
					ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
					table.insert(Forces, ForceInstance)
					if not table.find(frozenParts,part) then
						table.insert(frozenParts,part)
					end
				end
			end
			if not simRadius then
				SimRad()
			end
			for i,c in pairs(Forces) do
				c.Position = plr.Character.Head.Position
			end
		end
	end    
})

LP:AddToggle({
	Name = "Noclip",
	Default = false,
	Callback = function(Noclip)
        if Noclip == true then
            Clip = false
	wait(0.1)
	local function NoclipLoop()
		if Clip == false and plr.Character ~= nil then
			for _, child in pairs(plr.Character:GetDescendants()) do
				if child:IsA("BasePart") and child.CanCollide == true then
					child.CanCollide = false
				end
			end
		end
	end
	Noclipping = game:GetService('RunService').Stepped:Connect(NoclipLoop)
		else
		    Noclip = false
			if Noclipping then
		Noclipping:Disconnect()
	end
	Clip = true
		end		
  end    
})

local Player = Window:MakeTab({
	Name = "Players",
	Icon = "rbxassetid://6034281935",
	PremiumOnly = false
})
 
local Section = Player:AddSection({
	Name = "Player"
})
 
local PlayerTarget
local PlayerTargettwo
 
Player:AddTextbox({
	Name = "Player Name",
	Default = "",
	TextDisappear = false,
	Callback = function(Walktofollow)
		local Target = unpack(GetPlayer(Walktofollow))
		PlayerTarget = Target
	end		  
})

Player:AddButton({
	Name = "Information about Player",
	Callback = function()
      	OrionLib:MakeNotification({
	Name = "Information about Player:",
	Content = 'Name: '..PlayerTarget.Name..' | Character Name: '..PlayerTarget.Character.Name..' | DisplayName: '..PlayerTarget.DisplayName..' | Account Age: '..PlayerTarget.AccountAge..' | User ID: '..PlayerTarget.UserId..' | Health: '..round(PlayerTarget.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | WalkSpeed: '..PlayerTarget.Character:FindFirstChildOfClass("Humanoid").WalkSpeed..' | JumpPower: '..PlayerTarget.Character:FindFirstChildOfClass("Humanoid").JumpPower,
	Image = "",
	Time = 10
})
  	end    
})

 Player:AddButton({
	Name = "Teleport To Player",
	Callback = function()
      	plr.Character.HumanoidRootPart.CFrame = getRoot(PlayerTarget.Character).CFrame
  	end    
})

Player:AddButton({
	Name = "Vehicle Teleport to Player",
	Callback = function()
		if PlayerTarget.Character ~= nil then
			local seat = plr.Character:FindFirstChildOfClass('Humanoid').SeatPart
			local vehicleModel = seat.Parent
			repeat
				if vehicleModel.ClassName ~= "Model" then
					vehicleModel = vehicleModel.Parent
				end
			until vehicleModel.ClassName == "Model"
			for i,v in pairs(vehicleModel.Parent:GetDescendants()) do
				if v:IsA("BasePart") and v.Anchored then
					if v.Anchored == false then
				   v:MoveTo(getRoot(PlayerTarget.Character).Position)
					end
				end   
			end
			wait(0.1)
			vehicleModel:MoveTo(getRoot(PlayerTarget.Character).Position)
	end
	end    
})

Player:AddButton({
	Name = "Fling Noclipped Player",
	Callback = function()
flinghh = 1000
local lp = game.Players.LocalPlayer

if type(PlayerTarget) == "string" then return end

local oldpos = lp.Character.HumanoidRootPart.CFrame
local oldhh = lp.Character.Humanoid.HipHeight

local carpetAnim = Instance.new("Animation")
carpetAnim.AnimationId = "rbxassetid://282574440"
carpet = lp.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(carpetAnim)
carpet:Play(.1, 1, 1)

local carpetLoop

local tTorso = PlayerTarget.Character:FindFirstChild("Torso") or PlayerTarget.Character:FindFirstChild("LowerTorso") or PlayerTarget.Character:FindFirstChild("HumanoidRootPart")

spawn(function()
    carpetLoop = game:GetService('RunService').Heartbeat:Connect(function()
	    pcall(function()
	        if tTorso.Velocity.magnitude <= 28 then -- if target uses netless just target their local position
    	        local pos = {x=0, y=0, z=0}
        		pos.x = tTorso.Position.X
        		pos.y = tTorso.Position.Y
        		pos.z = tTorso.Position.Z
        		pos.x = pos.x + tTorso.Velocity.X / 2
        		pos.y = pos.y + tTorso.Velocity.Y / 2
        		pos.z = pos.z + tTorso.Velocity.Z / 2
    		    lp.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(pos.x,pos.y,pos.z))
    		else
    		    lp.Character.HumanoidRootPart.CFrame = tTorso.CFrame
		    end
	    end)
    end)
end)

wait()

lp.Character.Humanoid.HipHeight = flinghh

wait(.5)

carpetLoop:Disconnect()
wait()
lp.Character.Humanoid.Health = 0
wait(game.Players.RespawnTime + .6)
lp.Character.HumanoidRootPart.CFrame = oldpos
  	end    
})

Player:AddToggle({
	Name = "Fling Player",
	Default = false,
	Callback = function(Flinglol)
        if Flinglol == true then
            plr.Character.Humanoid.PlatformStand = Platformstand
			Flinging = true
	local Thrust = Instance.new("BodyThrust", plr.Character.HumanoidRootPart)
	Thrust.Force = Vector3.new(100000, 100000, 100000)
	Thrust.Name = "FlingForce"
	repeat
		plr.Character.HumanoidRootPart.CFrame = getRoot(PlayerTarget.Character).CFrame
		Thrust.Location = getRoot(PlayerTarget.Character).Position
		game:GetService('RunService').Heartbeat:Wait()
	until not getRoot(PlayerTarget.Character) or Flinging == false
		else
		    Flinglol = false
			Flinging = false
			plr.Character.Humanoid.PlatformStand = false
	for i,v in pairs(plr.Character.HumanoidRootPart:GetChildren()) do
		if v.Name == "FlingForce" and v:IsA("BodyThrust") then
			v:Destroy()
		end
	end
		end		
  end    
})

Player:AddToggle({
	Name = "PlatformStand Fling",
	Default = false,
	Callback = function(pFlinglol)
        if pFlinglol == true then
            Platformstand = true
		else
		    pFlinglol = false
			Platformstand = false
		end		
  end    
})


Player:AddButton({
	Name = "Look At Player",
	Callback = function()
      	local preMaxZoom = game.Players.LocalPlayer.CameraMaxZoomDistance
	local preMinZoom = game.Players.LocalPlayer.CameraMinZoomDistance
	if plr.CameraMaxZoomDistance ~= 0.5 then
		preMaxZoom = plr.CameraMaxZoomDistance
		preMinZoom = plr.CameraMinZoomDistance
	end
	plr.CameraMaxZoomDistance = 0.5
	plr.CameraMinZoomDistance = 0.5
	wait()
		if PlayerTarget.Character and PlayerTarget.Character:FindFirstChild('Head') then
			game.Workspace.CurrentCamera.CFrame = CFrame.new(game.Workspace.CurrentCamera.CFrame.p, PlayerTarget.Character.Head.CFrame.p)
			wait(0.1)
		end
	plr.CameraMaxZoomDistance = preMaxZoom
	plr.CameraMinZoomDistance = preMinZoom
  	end    
})

Player:AddButton({
	Name = "unAnchored Parts to Player",
	Callback = function()
      	if sethidden then
			local Forces = {}
			for _,part in pairs(game.Workspace:GetDescendants()) do
				if PlayerTarget.Character:FindFirstChild("Head") and part:IsA("BasePart" or "UnionOperation" or "Model") and part.Anchored == false and not part:IsDescendantOf(plr.Character) and part.Name == "Torso" == false and part.Name == "Head" == false and part.Name == "Right Arm" == false and part.Name == "Left Arm" == false and part.Name == "Right Leg" == false and part.Name == "Left Leg" == false and part.Name == "HumanoidRootPart" == false then
					for i,c in pairs(part:GetChildren()) do
						if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
							c:Destroy()
						end
					end
					local ForceInstance = Instance.new("BodyPosition")
					ForceInstance.Parent = part
					ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
					table.insert(Forces, ForceInstance)
					if not table.find(frozenParts,part) then
						table.insert(frozenParts,part)
					end
				end
			end
			if not simRadius then
				SimRad()
			end
			for i,c in pairs(Forces) do
				c.Position = PlayerTarget.Character.Head.Position
			end
		end
	end    
})

Player:AddButton({
	Name = "Give Tools To Player",
	Callback = function()
      	game.Players.LocalPlayer.Character.Humanoid.Name = 1
local l = game.Players.LocalPlayer.Character["1"]:Clone()
l.Parent = game.Players.LocalPlayer.Character
l.Name = "Humanoid"
wait(0.1)
game.Players.LocalPlayer.Character["1"]:Destroy()
game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character.Animate.Disabled = true
wait(0.1)
game.Players.LocalPlayer.Character.Animate.Disabled = false
game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"

for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
    if v:IsA("Tool") then
       v.Parent = game:GetService("Players").LocalPlayer.Character
    end
end

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = getRoot(PlayerTarget.Character).CFrame
  	end    
})

Player:AddButton({
	Name = "Bring Player",
	Callback = function()
      	bring(speaker, PlayerTarget)
  	end    
})

Player:AddButton({
	Name = "Fast Bring Player",
	Callback = function()
      	bring(speaker, PlayerTarget, true)
  	end    
})

Player:AddButton({
	Name = "Fast Bring Player [GodMode Method]",
	Callback = function()
      	NOW = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
game.Players.LocalPlayer.Character.Humanoid.Name = 1
local l = game.Players.LocalPlayer.Character["1"]:Clone()
l.Parent = game.Players.LocalPlayer.Character
l.Name = "Humanoid"
wait(0.1)
game.Players.LocalPlayer.Character["1"]:Destroy()
game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character.Animate.Disabled = true
wait(0.1)
game.Players.LocalPlayer.Character.Animate.Disabled = false
game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"
for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
end
local function tp(player,player2)
local char1,char2=player.Character,player2.Character
if char1 and char2 then
char1.HumanoidRootPart.CFrame = char2.HumanoidRootPart.CFrame
end
end
local function getout(player,player2)
local char1,char2=player.Character,player2.Character
if char1 and char2 then
char1:MoveTo(char2.HumanoidRootPart.Position)
end
end
tp(PlayerTarget, game.Players.LocalPlayer)
wait(0.1)
tp(PlayerTarget, game.Players.LocalPlayer)
wait(0.3)
getout(game.Players.LocalPlayer, PlayerTarget)
wait(0.2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = NOW
  	end    
})

Player:AddButton({
	Name = "Kill Player",
	Callback = function()
      	kill(speaker, PlayerTarget)
  	end    
})

Player:AddButton({
	Name = "Fast Kill Player",
	Callback = function()
      	kill(speaker, PlayerTarget, true)
  	end    
})

Player:AddButton({
	Name = "ToolHandle Kill Player",
	Callback = function()
      	local Char = plr.Character
local RS = game:GetService("RunService").RenderStepped
local Tool = Char:FindFirstChildWhichIsA("Tool")
local Handle = Tool and Tool:FindFirstChild("Handle")
if not Tool or not Handle then
   return game.StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You need to hold a 'Tool' that does damage on touchinterest. For example Sword or Knife.", Duration = 4,})
end
task.spawn(function()
   while Tool and Char and PlayerTarget.Character and Tool.Parent == Char do
           local Human = PlayerTarget.Character:FindFirstChildWhichIsA("Humanoid")
           if not Human or Human.Health <= 0 then
                   break
           end
           for i, v1 in ipairs(PlayerTarget.Character:GetChildren()) do
                   v1 = ((v1:IsA("BasePart") and firetouchinterest(Handle, v1, 1, (RS.Wait(RS) and nil) or firetouchinterest(Handle, v1, 0)) and nil) or v1) or v1
           end
   end
   game.StarterGui:SetCore("SendNotification", {Title = "Done!", Text = "ToolHandle Kill Stopped. Because player died/left or you just unequipped the tool.", Duration = 4,})
end)
  	end    
})

Player:AddToggle({
	Name = "View Player",
	Default = false,
	Callback = function(View)
        if View == true then
		if viewDied then
			viewDied:Disconnect()
			viewChanged:Disconnect()
		end
		viewing = PlayerTarget
		game.Workspace.CurrentCamera.CameraSubject = viewing.Character
		local function viewDiedFunc()
			repeat wait() until PlayerTarget.Character ~= nil and getRoot(PlayerTarget.Character)
			game.Workspace.CurrentCamera.CameraSubject = viewing.Character
		end
		viewDied = PlayerTarget.CharacterAdded:Connect(viewDiedFunc)
		local function viewChangedFunc()
			game.Workspace.CurrentCamera.CameraSubject = viewing.Character
		end
		viewChanged = game.Workspace.CurrentCamera:GetPropertyChangedSignal("CameraSubject"):Connect(viewChangedFunc)
		else
		    View = false
			if viewing ~= nil then
		viewing = nil
	end
	if viewDied then
		viewDied:Disconnect()
		viewChanged:Disconnect()
	end
	game.Workspace.CurrentCamera.CameraSubject = plr.Character
		end		
  end    
})

Player:AddToggle({
	Name = "Walk To Player",
	Default = false,
	Callback = function(Walkn)
        if Walkn == true then
            if plr.Character:FindFirstChildOfClass('Humanoid') and plr.Character:FindFirstChildOfClass('Humanoid').SeatPart then
		plr.Character:FindFirstChildOfClass('Humanoid').Sit = false
		wait(.1)
	end
	    if WalkTo == false then
		WalkTo = true
		repeat wait()
		     plr.Character:FindFirstChild("Humanoid"):MoveTo(getRoot(PlayerTarget.Character).Position)
			 until PlayerTarget.Character == nil or not getRoot(PlayerTarget.Character) or WalkTo == false	
	end
		else
		    Walkn = false
			WalkTo = false
		end		
  end    
})

Player:AddToggle({
	Name = "Pathfind Walk To Player",
	Default = false,
	Callback = function(Walkns)
        if Walkns == true then
            WalkTo = false
	local PathService = game:GetService("PathfindingService")
	local hum = plr.Character:FindFirstChildOfClass("Humanoid")
	local path = PathService:CreatePath()
	
	if WalkTo == false then
		WalkTo = true
	repeat wait()
		local success, response = pcall(function()
			path:ComputeAsync(getRoot(plr.Character).Position, getRoot(PlayerTarget.Character).Position)
			local waypoints = path:GetWaypoints()
			local distance 
			for waypointIndex, waypoint in pairs(waypoints) do
				local waypointPosition = waypoint.Position
				hum:MoveTo(waypointPosition)
				repeat 
					distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
					wait()
				until
				distance <= 5
			end	 
		end)
		if not success then
			plr.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(PlayerTarget.Character).Position)
		end
		until PlayerTarget.Character == nil or not getRoot(PlayerTarget.Character) or WalkTo == false
		end
		else
		    Walkns = false
			WalkTo = false
		end		
  end    
})

Player:AddToggle({
	Name = "Walk To Tool Player",
	Default = false,
	Callback = function(Walknss)
        if Walknss == true then
           if Guarding == false then
              Guarding = true
                    repeat wait()
                    if getRoot(PlayerTarget.Character).Velocity.Magnitude > 0.5 and PlayerTarget.Character:FindFirstChildOfClass("Tool") then
                       plr.Character:FindFirstChildOfClass("Humanoid"):MoveTo(getRoot(PlayerTarget.Character).CFrame.p + getRoot(PlayerTarget.Character).Velocity.unit * 7)
                    elseif getRoot(PlayerTarget.Character).Velocity.Magnitude < 0.5 and PlayerTarget.Character:FindFirstChildOfClass("Tool") then
		     plr.Character:FindFirstChild("Humanoid"):MoveTo(getRoot(PlayerTarget.Character).CFrame.p)
end
                    until PlayerTarget.Character == nil or not getRoot(PlayerTarget.Character) or not PlayerTarget.Character:FindFirstChildOfClass("Tool") or Guarding == false
		  end
                   
		else
		    Walknss = false
            Guarding = false
		end		
  end    
})

Player:AddToggle({
	Name = "Animation Steal Player",
	Default = false,
	Callback = function(animsteals)
        if animsteals == true then
            if not plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
               return game.StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You can't steal in R6 games. You need to be in R15 games - R15 is required!", Duration = 5,})
			end
			if not PlayerTarget.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
               return game.StarterGui:SetCore("SendNotification", {Title = "Oops.", Text = "The player is in R6 animation. Try to write other player target name. Your player target should be in R15 Animation - Player R15 is required!", Duration = 15,})
			end
			if PlayerTarget.Character:FindFirstChild("Animate") then
		if plr.Character:FindFirstChild("Animate") then
				checkifmyanim = plr.Character:FindFirstChild("animstorage")
			if checkifmyanim then
				local z = plr.Character:FindFirstChild("Animate")
				if z then 
				   z:Destroy() 
				end
				checkifmyanim.Name = "Animate"
				checkifmyanim.Disabled = false
			end
		end
		local z = plr.Character:FindFirstChild("Animate")
		if z then
			z.Name = "animstorage"
			z.Disabled = true
		end
		local newanim = PlayerTarget.Character.Animate:Clone()
		newanim.Parent = plr.Character
		newanim.Name = "Animate"
			end
		else
		    animsteals = false
			if game.Players.LocalPlayer.Character:FindFirstChild("animstorage") then
		if game.Players.LocalPlayer.Character:FindFirstChild("Animate") then
			game.Players.LocalPlayer.Character:FindFirstChild("Animate"):Destroy()
		end
		local as = game.Players.LocalPlayer.Character:FindFirstChild("animstorage")
		as.Name = "Animate"
		as.Disabled = false
		end
		end
  end   
})

Player:AddToggle({
	Name = "Stare At Player",
	Default = false,
	Callback = function(Stareq)
        if Stareq == true then
		if stareLoop then
			stareLoop:Disconnect()
		end
		if not plr.Character:FindFirstChild("HumanoidRootPart") and PlayerTarget.Character:FindFirstChild("HumanoidRootPart") then return end
		local function stareFunc()
			if plr.Character.PrimaryPart and PlayerTarget.Character ~= nil and PlayerTarget.Character:FindFirstChild("HumanoidRootPart") then
				local chrPos= plr.Character.PrimaryPart.Position
				local tPos= PlayerTarget.Character:FindFirstChild("HumanoidRootPart").Position
				local modTPos=Vector3.new(tPos.X,chrPos.Y,tPos.Z)
				local newCF=CFrame.new(chrPos,modTPos)
				plr.Character:SetPrimaryPartCFrame(newCF)
			elseif not PlayerTarget:FindFirstChild(game.Players) then
				stareLoop:Disconnect()
			end
		end

		stareLoop = game:GetService("RunService").RenderStepped:Connect(stareFunc)
		else
		    Stareq = false
			if stareLoop then
		stareLoop:Disconnect()
	end
		end		
  end    
})

local Section = Player:AddSection({
	Name = "Two players"
})

Player:AddTextbox({
	Name = "Player Name",
	Default = "",
	TextDisappear = true,
	Callback = function(Walktofollow)
		local Target = unpack(GetPlayer(Walktofollow))
		PlayerTargettwo = Target
	end		  
})

Player:AddButton({
	Name = "Teleport Player to Player",
	Callback = function()
      	if getRoot(PlayerTarget.Character) and getRoot(PlayerTargettwo.Character) then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			teleport(speaker,PlayerTarget,PlayerTargettwo)
		end
  	end    
})

Player:AddButton({
	Name = "Fast Teleport Player to Player",
	Callback = function()
      	if getRoot(PlayerTarget.Character) and getRoot(PlayerTargettwo.Character) then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			teleport(speaker,PlayerTarget,PlayerTargettwo, true)
		end
  	end    
})
